datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "go run github.com/steebchen/prisma-client-go"
  output          = "../internal/db"
  package         = "db"
  binaryTargets   = ["native"]
  previewFeatures = ["fullTextSearch"]
}

enum AuthMethod {
  GITHUB
  DISCORD
  UNDEFINED
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  authMethod AuthMethod
  github     GitHub?
  discord    Discord?

  name  String  @db.String(64)
  bio   String?
  admin Boolean @default(false)

  servers Server[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model GitHub {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])

  accountId String @unique
  username  String @unique
  email     String @unique
}

model Discord {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])

  accountId String @unique
  username  String @unique
  email     String @unique
}

model Server {
  id String @id @default(uuid())

  // essential data (short names to save data!)
  ip String  @unique
  hn String
  pc BigInt
  pm BigInt
  gm String
  la String
  pa Boolean
  vn String
  ru Rule[]

  // domain name for de-duplication purposes
  domain String?

  // rich data (entered by server owners via the web UI)
  description String?
  banner      String?

  // user who owns this server
  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  active    Boolean
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  lastActive DateTime?
  omp       Boolean   @default(false)
  partner   Boolean   @default(false)
  pending   Boolean   @default(false)
}

model Rule {
  id       BigInt  @id @default(autoincrement())
  name     String
  value    String
  Server   Server? @relation(fields: [serverId], references: [id])
  serverId String?

  @@unique([name, serverId], name: "Rule_serverId_rule_name_index")
}

model ServerIPBlacklist {
  id String @id @default(uuid())

  ip String @unique
}
